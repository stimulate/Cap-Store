@model PaginatedList<QualityCap.Models.Cap>
@using PagedList.Mvc;
@using PagedList;
@{
    ViewData["Title"] = "Index";
}

<h2>Caps</h2>

<p>
    <a asp-action="Create">Create New</a>
</p>
<form asp-action="Index" method="get">
    <div class="form-actions no-color">
        <p>
            Find by name: <input type="text" name="SearchString" value="@ViewData["currentFilter"]" />
            <input type="submit" value="Search" class="btn btn-default" /> |
            <a asp-action="Index">Back to Full List</a>
        </p>
    </div>
</form>

<table class="table">
    <thead>
        <tr>
            <th>
                <a asp-action="Index" asp-route-sortOrder="@ViewData["NameSortParm"]" asp-route-currentFilter="@ViewData["CurrentFilter"]">Name</a>
            </th>
            <th>
                Price
            </th>
            <th>
                Image
            </th>
            <th>
                Description
            </th>
            <th></th>
        </tr>
    </thead>
    <tbody>
        @foreach (var item in Model)
        {

            var img = @Href(item.Image);
            <tr>
                <td>
                    @Html.DisplayFor(modelItem => item.Name)
                </td>
                <td>
                    @Html.DisplayFor(modelItem => item.Price)
                </td>
                <td>
                    <img style="width: 200px; height: 200px;" src="@img" alt="Cap Image" />
                </td>
                <td>
                    @Html.DisplayFor(modelItem => item.Description)
                </td>
                @*<td>
                        @Html.DisplayFor(modelItem => item.Supplier.Name)
                    </td>*@
                <td>
                    <a asp-action="Edit" asp-route-id="@item.CapID">Edit</a> |
                    <a asp-action="Details" asp-route-id="@item.CapID">Details</a> |
                    <a asp-action="Delete" asp-route-id="@item.CapID">Delete</a>
                </td>


            </tr>
        }
    </tbody>
</table>
<br />
Page @(Model.TotalPages < Model.PageIndex ? 0 : Model.PageIndex) of @Model.TotalPages


@{
    var prevDisabled = !Model.HasPreviousPage ? "disabled" : "";
    var nextDisabled = !Model.HasNextPage ? "disabled" : "";
}

<a asp-action="Index"
   asp-route-sortOrder="@ViewData["CurrentSort"]"
   asp-route-page="@(Model.PageIndex - 1)"
   asp-route-currentFilter="@ViewData["CurrentFilter"]"
   class="btn btn-default @prevDisabled">
    Previous
</a>
<a asp-action="Index"
   asp-route-sortOrder="@ViewData["CurrentSort"]"
   asp-route-page="@(Model.PageIndex + 1)"
   asp-route-currentFilter="@ViewData["CurrentFilter"]"
   class="btn btn-default @nextDisabled">
    Next
</a>
